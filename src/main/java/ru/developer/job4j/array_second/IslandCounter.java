package ru.developer.job4j.array_second;

/**
 * Вам предоставляется двумерный массив целых чисел, представляющий карту, где:
 * 1 — это часть суши,
 * 0 — это вода.
 * Островом считается любая последовательность соединённых по горизонтали или вертикали клеток, содержащих 1.
 * Ваша задача — найти самый большой остров на карте и вернуть количество клеток суши, которые этот остров занимает.
 * Требования:
 * Написать класс IslandCounter с методом findLargestIsland, который принимает двумерный массив и возвращает размер
 * (количество клеток суши) самого большого острова.
 * Метод должен корректно обрабатывать карты различного размера и сложности, включая карты, где нет островов или есть только один остров.
 * Острова могут быть любой формы, но клетки считаются соединёнными только по горизонтали и вертикали (диагональные соединения не учитываются).
 * Пример:
 * Для карты:
 * int[][] map = {
 * {1, 1, 0, 0, 0},
 * {0, 1, 0, 0, 1},
 * {0, 0, 0, 1, 1},
 * {1, 1, 0, 0, 0},
 * {1, 1, 0, 0, 0}
 * };
 * Ваш метод должен вернуть 4, так как самый большой остров состоит из 4 клеток суши.
 * Условия:
 * Размер карты ограничен до 50x50 клеток.
 * Все клетки острова должны быть соединены по горизонтали или вертикали.
 * Метод должен возвращать 0, если на карте нет островов.
 */
public class IslandCounter {

    // Метод для поиска самого большого острова
    public int findLargestIsland(int[][] map) {
        int count = 0;
        for (int i = 0; i < map.length; i++) {
            for (int j = 0; j < map[0].length; j++) {
                if (map[i][j] == 1) {
                    int temp = exploreIsland(map, i, j);
                    count = Math.max(count, temp);
                }
            }
        }
        return count; // placeholder
    }

    // Вспомогательный метод для проверки соединенных клеток суши
    private int exploreIsland(int[][] map, int row, int col) {
        if (row < 0 || row >= map.length || col < 0 || col >= map[0].length || map[row][col] == 0) {
            return 0;
        }

        map[row][col] = 0;

        return 1 + exploreIsland(map, row + 1, col)
                + exploreIsland(map, row - 1, col)
                + exploreIsland(map, row, col + 1)
                + exploreIsland(map, row, col - 1); // placeholder
    }
}
